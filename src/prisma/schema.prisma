generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type EntityMetadata {
  name        String
  description String
  discord     String?
  logo        String?
  telegram    String?
  website     String?
  x           String?
}

type AvsOperator {
  address  String
  isActive Boolean
}

model Avs {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  address         String          @unique
  metadata        EntityMetadata
  curatedMetadata EntityMetadata?
  tags            String[]

  isVisible  Boolean       @default(false)
  isVerified Boolean       @default(false)
  operators  AvsOperator[]

  @@index([tags], map: "tags_1")
}

model Operator {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  address String @unique

  metadata        EntityMetadata
  curatedMetadata EntityMetadata?
  stakers         String[]
  totalStakers    Int @default(0)
}

model Pod {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  address     String @unique
  owner       String
  blockNumber BigInt
}

model ValidatorRestake {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  podAddress     String
  validatorIndex BigInt
  blockNumber    BigInt
}

model Validator {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  validatorIndex BigInt
  status         String

  balance               BigInt
  effectiveBalance      BigInt
  slashed               Boolean
  withdrawalCredentials String
}

model Deposit {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  address String @unique
}

model Withdrawals {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model QueuedWithdrawals {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model SyncTask {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String
  status    String
  fromBlock BigInt
  toBlock   BigInt
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

// Collection to store system settings
model Settings {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  key       String   @unique
  value     Json     @db.Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ======================================

model strategies {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}
