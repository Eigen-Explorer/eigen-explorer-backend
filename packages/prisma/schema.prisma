generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Avs {
  address             String              @id @unique
  metadataName        String
  metadataDescription String
  metadataDiscord     String?
  metadataLogo        String?
  metadataTelegram    String?
  metadataWebsite     String?
  metadataX           String?
  createdAtBlock      String?
  updatedAtBlock      String?
  curatedMetadata     AvsCuratedMetadata?
  operators           AvsOperator[]
}

model AvsCuratedMetadata {
  avsAddress          String   @id @unique
  metadataName        String?
  metadataDescription String?
  metadataDiscord     String?
  metadataLogo        String?
  metadataTelegram    String?
  metadataWebsite     String?
  metadataX           String?
  tags                String[]
  isVisible           Boolean  @default(false)
  isVerified          Boolean  @default(false)
  avs                 Avs      @relation(fields: [avsAddress], references: [address], map: "avscuratedmetadata_avsaddress_fkey")

  @@index([tags], map: "tags_1")
}

model AvsOperator {
  avsAddress      String
  operatorAddress String
  isActive        Boolean
  avs             Avs      @relation(fields: [avsAddress], references: [address], map: "avsoperator_avsaddress_fkey")
  operator        Operator @relation(fields: [operatorAddress], references: [address], map: "avsoperator_operatoraddress_fkey")

  @@id([avsAddress, operatorAddress])
}

model Strategies {
  address String @id(map: "strategies_pkey")
  symbol  String
}

model Operator {
  address             String                   @id @unique
  metadataName        String
  metadataDescription String
  metadataDiscord     String?
  metadataLogo        String?
  metadataTelegram    String?
  metadataWebsite     String?
  metadataX           String?
  createdAtBlock      String?
  updatedAtBlock      String?
  avs                 AvsOperator[]
  shares              OperatorStrategyShares[]
  stakers             Staker[]
}

model OperatorStrategyShares {
  operatorAddress String
  strategyAddress String
  shares          String
  Operator        Operator @relation(fields: [operatorAddress], references: [address], map: "operatorstrategyshares_operatoraddress_fkey")

  @@id([operatorAddress, strategyAddress])
}

model Staker {
  address         String                 @id(map: "staker_pkey") @unique
  operatorAddress String?
  operator        Operator?              @relation(fields: [operatorAddress], references: [address], map: "staker_operatoraddress_fkey")
  shares          StakerStrategyShares[]
}

model StakerStrategyShares {
  stakerAddress   String
  strategyAddress String
  shares          String
  Staker          Staker @relation(fields: [stakerAddress], references: [address], map: "stakerstrategyshares_stakeraddress_fkey")

  @@id([stakerAddress, strategyAddress], map: "stakerstrategyshares_pkey")
}

model Pod {
  address     String @id @unique
  owner       String
  blockNumber BigInt
}

model ValidatorRestake {
  podAddress     String
  validatorIndex BigInt
  blockNumber    BigInt

  @@id([podAddress, validatorIndex], map: "validatorrestake_pkey")
}

model Validator {
  validatorIndex        BigInt  @id(map: "validator_pkey")
  status                String
  balance               BigInt
  effectiveBalance      BigInt
  slashed               Boolean
  withdrawalCredentials String
}

model Settings {
  key       String   @id(map: "settings_pkey") @unique
  value     Json     @db.Json
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)
}
