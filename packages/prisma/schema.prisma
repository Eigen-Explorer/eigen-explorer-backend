generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Avs {
  address String @id @unique

  metadataUrl         String?
  metadataName        String
  metadataDescription String
  metadataDiscord     String?
  metadataLogo        String?
  metadataTelegram    String?
  metadataWebsite     String?
  metadataX           String?
  isMetadataSynced    Boolean @default(false)

  operators       AvsOperator[]
  curatedMetadata AvsCuratedMetadata?

  createdAtBlock BigInt   @default(0)
  updatedAtBlock BigInt   @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}

model AvsCuratedMetadata {
  avs        Avs    @relation(fields: [avsAddress], references: [address])
  avsAddress String @id @unique

  metadataName        String?
  metadataDescription String?
  metadataDiscord     String?
  metadataLogo        String?
  metadataTelegram    String?
  metadataWebsite     String?
  metadataX           String?

  tags       String[]
  isVisible  Boolean  @default(false)
  isVerified Boolean  @default(false)

  @@index([tags], map: "tags_1")
}

model AvsOperator {
  avs             Avs      @relation(fields: [avsAddress], references: [address])
  avsAddress      String
  operator        Operator @relation(fields: [operatorAddress], references: [address])
  operatorAddress String
  isActive        Boolean

  @@id([avsAddress, operatorAddress])
}

model Strategies {
  address String @id
  symbol  String
}

model Operator {
  address String @id @unique

  metadataUrl         String?
  metadataName        String
  metadataDescription String
  metadataDiscord     String?
  metadataLogo        String?
  metadataTelegram    String?
  metadataWebsite     String?
  metadataX           String?
  isMetadataSynced    Boolean @default(false)

  avs     AvsOperator[]
  shares  OperatorStrategyShares[]
  stakers Staker[]

  createdAtBlock BigInt   @default(0)
  updatedAtBlock BigInt   @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}

model OperatorStrategyShares {
  Operator        Operator @relation(fields: [operatorAddress], references: [address])
  operatorAddress String
  strategyAddress String
  shares          String

  @@id([operatorAddress, strategyAddress])
}

model Staker {
  address String @id @unique

  operator        Operator? @relation(fields: [operatorAddress], references: [address])
  operatorAddress String?

  shares StakerStrategyShares[]

  createdAtBlock BigInt   @default(0)
  updatedAtBlock BigInt   @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}

model StakerStrategyShares {
  Staker          Staker @relation(fields: [stakerAddress], references: [address])
  stakerAddress   String
  strategyAddress String
  shares          String

  @@id([stakerAddress, strategyAddress])
}

model Deposit {
  transactionHash String @id @unique
  stakerAddress   String
  tokenAddress    String
  strategyAddress String
  shares          String

  createdAtBlock BigInt   @default(0)
  createdAt      DateTime @default(now())
}

model Pod {
  address     String @id @unique
  owner       String
  blockNumber BigInt // @Deprecated, will remove in future release

  createdAtBlock BigInt   @default(0)
  updatedAtBlock BigInt   @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}

model ValidatorRestake {
  podAddress     String
  validatorIndex BigInt
  blockNumber    BigInt

  @@id([podAddress, validatorIndex])
}

model Validator {
  validatorIndex BigInt @id
  status         String

  balance               BigInt
  effectiveBalance      BigInt
  slashed               Boolean
  withdrawalCredentials String
}

model WithdrawalQueued {
  withdrawalRoot String  @id @unique
  nonce          Int

  stakerAddress     String
  delegatedTo       String
  withdrawerAddress String
  strategies        String[]
  shares            String[]
  startBlock        BigInt

  createdAtBlock BigInt   @default(0)
  createdAt      DateTime @default(now())

  completedWithdrawal WithdrawalCompleted?
}

model WithdrawalCompleted {
  withdrawalRoot    String  @id @unique

  createdAtBlock BigInt   @default(0)
  createdAt      DateTime @default(now())

  queuedWithdrawal WithdrawalQueued  @relation(fields: [withdrawalRoot], references: [withdrawalRoot])
}

// Collection to store system settings
model Settings {
  key       String   @id @unique
  value     Json     @db.Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// RAW Event Logs

model EventLogs_AVSMetadataURIUpdated {
  address String

  transactionHash  String
  transactionIndex Int
  blockNumber      BigInt
  blockHash        String
  blockTime        DateTime

  avs         String
  metadataURI String

  @@id([transactionHash, transactionIndex])
  @@index([avs])
}

model EventLogs_OperatorMetadataURIUpdated {
  address String

  transactionHash  String
  transactionIndex Int
  blockNumber      BigInt
  blockHash        String
  blockTime        DateTime

  operator    String
  metadataURI String

  @@id([transactionHash, transactionIndex])
  @@index([operator])
}

model EventLogs_OperatorAVSRegistrationStatusUpdated {
  address String

  transactionHash  String
  transactionIndex Int
  blockNumber      BigInt
  blockHash        String
  blockTime        DateTime

  operator String
  avs      String
  status   Int

  @@id([transactionHash, transactionIndex])
  @@index([operator, avs])
}

model EventLogs_PodDeployed {
  address String

  transactionHash  String
  transactionIndex Int
  blockNumber      BigInt
  blockHash        String
  blockTime        DateTime

  eigenPod String
  podOwner String

  @@id([transactionHash, transactionIndex])
  @@index([eigenPod, podOwner])
}

model EventLogs_StakerDelegated {
  address String

  transactionHash  String
  transactionIndex Int
  blockNumber      BigInt
  blockHash        String
  blockTime        DateTime

  staker   String
  operator String

  @@id([transactionHash, transactionIndex])
  @@index([staker, operator])
}

model EventLogs_StakerUndelegated {
  address String

  transactionHash  String
  transactionIndex Int
  blockNumber      BigInt
  blockHash        String
  blockTime        DateTime

  staker   String
  operator String

  @@id([transactionHash, transactionIndex])
  @@index([staker, operator])
}

model EventLogs_OperatorSharesIncreased {
  address String

  transactionHash  String
  transactionIndex Int
  blockNumber      BigInt
  blockHash        String
  blockTime        DateTime

  staker   String
  operator String
  strategy String
  shares   String

  @@id([transactionHash, transactionIndex])
  @@index([staker, operator])
}

model EventLogs_OperatorSharesDecreased {
  address String

  transactionHash  String
  transactionIndex Int
  blockNumber      BigInt
  blockHash        String
  blockTime        DateTime

  staker   String
  operator String
  strategy String
  shares   String

  @@id([transactionHash, transactionIndex])
  @@index([staker, operator])
}

model EventLogs_WithdrawalQueued {
  address String

  transactionHash  String
  transactionIndex Int
  blockNumber      BigInt
  blockHash        String
  blockTime        DateTime

  withdrawalRoot String
  staker         String
  delegatedTo    String
  withdrawer     String
  nonce          BigInt
  startBlock     BigInt
  strategies     String[]
  shares         String[]

  @@id([transactionHash, transactionIndex])
  @@index([withdrawalRoot])
}

model EventLogs_WithdrawalCompleted {
  address String

  transactionHash  String
  transactionIndex Int
  blockNumber      BigInt
  blockHash        String
  blockTime        DateTime

  withdrawalRoot String

  @@id([transactionHash, transactionIndex])
  @@index([withdrawalRoot])
}

model EventLogs_Deposit {
  address String

  transactionHash  String
  transactionIndex Int
  blockNumber      BigInt
  blockHash        String
  blockTime        DateTime

  staker   String
  token    String
  strategy String
  shares   String

  @@id([transactionHash, transactionIndex])
  @@index([staker])
}

// Misc

model Evm_BlockData {
  number    BigInt   @id
  timestamp DateTime
}
